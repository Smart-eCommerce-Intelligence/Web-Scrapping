apiVersion: apps/v1
kind: Deployment
metadata:
  name: shopify-scraper-api # Consistent naming
  labels:
    app: shopify-scraper-api # Label for service selector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: shopify-scraper-api # Must match template labels
  template:
    metadata:
      labels:
        app: shopify-scraper-api # Pods get this label
    spec:
      restartPolicy: Always
      containers:
      - name: shopify-scraper # Container name
        image: spamfake2022/shop-scraper:latest
        imagePullPolicy: Always
        ports:
        - name: http 
          containerPort: 5001 
        env:
          - name: DB_HOST 
            valueFrom:
              configMapKeyRef:
                name: app-configs
                key: DB_HOST
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                name: mysql-credentials
                key: username
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-credentials
                key: password
          - name: DB_NAME
            valueFrom:
              configMapKeyRef:
                name: app-configs
                key: SHOP_DB_NAME
          - name: STORES_FILE_PATH_IN_CONTAINER 
            valueFrom:
              configMapKeyRef:
                name: app-configs
                key: SHOP_STORES_FILE
          - name: FLASK_PORT_SHOPIFY 
            valueFrom:
              configMapKeyRef:
                name: app-configs
                key: FLASK_PORT_SHOPIFY
        resources: # Example
          requests:
            cpu: "50m"
            memory: "70Mi"
          limits:
            cpu: "500m"
            memory: "500Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: shopify-scraper-api-service
  labels:
    app: shopify-scraper-api # Match service selector
spec:
  type: ClusterIP # Internal service by default
  selector:
    app: shopify-scraper-api # Selects pods with this label
  ports:
  - name: http
    protocol: TCP
    port: 80 # Service listens on port 80 (common for HTTP)
    targetPort: http # Forwards to the container's named port 'http' (which is 5001)
